Canonical Collection : 
State 0 : 
S' -> .program , [$]
program -> .main_type MAIN LPAREN parameters_optional RPAREN LBRACE declarations_optional statements_optional main_return RBRACE , [$]
main_type -> .VOID , [MAIN]
main_type -> .INT , [MAIN]

State 1 : 
program -> main_type .MAIN LPAREN parameters_optional RPAREN LBRACE declarations_optional statements_optional main_return RBRACE , [$]

State 2 : 
S' -> program. , [$]

State 3 : 
main_type -> VOID. , [MAIN]

State 4 : 
main_type -> INT. , [MAIN]

State 5 : 
program -> main_type MAIN .LPAREN parameters_optional RPAREN LBRACE declarations_optional statements_optional main_return RBRACE , [$]

State 6 : 
program -> main_type MAIN LPAREN .parameters_optional RPAREN LBRACE declarations_optional statements_optional main_return RBRACE , [$]
parameters_optional -> .parameters , [RPAREN]
parameters_optional -> epsilon. , [RPAREN]
parameters -> .parameter , [COMMA, RPAREN]
parameters -> .parameters COMMA parameter , [COMMA, RPAREN]
type -> .INT , [ID]
type -> .FLOAT , [ID]
type -> .VOID , [ID]
type -> .STRING , [ID]
parameter -> .type ID , [COMMA, RPAREN]

State 7 : 
type -> FLOAT. , [ID]

State 8 : 
program -> main_type MAIN LPAREN parameters_optional .RPAREN LBRACE declarations_optional statements_optional main_return RBRACE , [$]

State 9 : 
parameters -> parameter. , [COMMA, RPAREN]

State 10 : 
type -> STRING. , [ID]

State 11 : 
type -> VOID. , [ID]

State 12 : 
parameter -> type .ID , [COMMA, RPAREN]

State 13 : 
parameters -> parameters .COMMA parameter , [COMMA, RPAREN]
parameters_optional -> parameters. , [RPAREN]

State 14 : 
type -> INT. , [ID]

State 15 : 
program -> main_type MAIN LPAREN parameters_optional RPAREN .LBRACE declarations_optional statements_optional main_return RBRACE , [$]

State 16 : 
parameter -> type ID. , [COMMA, RPAREN]

State 17 : 
parameters -> parameters COMMA .parameter , [COMMA, RPAREN]
parameter -> .type ID , [COMMA, RPAREN]
type -> .INT , [ID]
type -> .FLOAT , [ID]
type -> .VOID , [ID]
type -> .STRING , [ID]

State 18 : 
program -> main_type MAIN LPAREN parameters_optional RPAREN LBRACE .declarations_optional statements_optional main_return RBRACE , [$]
declarations_optional -> .declarations , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
declarations_optional -> epsilon. , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
declarations -> .declaration , [CONTINUE, RETURN, FLOAT, RBRACE, BREAK, FOR, STRING, ID, VOID, INT]
declarations -> .declarations declaration , [CONTINUE, RETURN, FLOAT, RBRACE, BREAK, FOR, STRING, ID, VOID, INT]
type -> .INT , [ID]
type -> .FLOAT , [ID]
type -> .VOID , [ID]
type -> .STRING , [ID]
declaration -> .type names SEMI , [CONTINUE, RETURN, FLOAT, RBRACE, BREAK, FOR, STRING, ID, VOID, INT]

State 19 : 
parameters -> parameters COMMA parameter. , [COMMA, RPAREN]

State 20 : 
program -> main_type MAIN LPAREN parameters_optional RPAREN LBRACE declarations_optional .statements_optional main_return RBRACE , [$]
statements_optional -> .statements , [RETURN, RBRACE]
statements_optional -> epsilon. , [RETURN, RBRACE]
statements -> .statement , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
statements -> .statements statement , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
assigment -> .ID ASSIGN expression , [SEMI]
statement -> .assigment SEMI , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
statement -> .CONTINUE SEMI , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
statement -> .BREAK SEMI , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
statement -> .for_statement , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
for_statement -> .FOR LPAREN assigment SEMI expression SEMI expression RPAREN tail , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 21 : 
declaration -> type .names SEMI , [CONTINUE, RETURN, FLOAT, RBRACE, BREAK, FOR, STRING, ID, VOID, INT]
names -> .ID , [COMMA, SEMI]
names -> .init , [COMMA, SEMI]
names -> .names COMMA init , [COMMA, SEMI]
names -> .names COMMA ID , [COMMA, SEMI]
init -> .ID ASSIGN constant , [COMMA, SEMI]

State 22 : 
declarations -> declaration. , [CONTINUE, RETURN, FLOAT, RBRACE, BREAK, FOR, STRING, ID, VOID, INT]

State 23 : 
declarations_optional -> declarations. , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
declarations -> declarations .declaration , [CONTINUE, RETURN, FLOAT, RBRACE, BREAK, FOR, STRING, ID, VOID, INT]
declaration -> .type names SEMI , [CONTINUE, RETURN, FLOAT, RBRACE, BREAK, FOR, STRING, ID, VOID, INT]
type -> .INT , [ID]
type -> .FLOAT , [ID]
type -> .VOID , [ID]
type -> .STRING , [ID]

State 24 : 
statement -> assigment .SEMI , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 25 : 
statement -> CONTINUE .SEMI , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 26 : 
statement -> for_statement. , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 27 : 
program -> main_type MAIN LPAREN parameters_optional RPAREN LBRACE declarations_optional statements_optional .main_return RBRACE , [$]
main_return -> .RETURN SEMI , [RBRACE]
main_return -> .RETURN ICONST SEMI , [RBRACE]
main_return -> epsilon. , [RBRACE]

State 28 : 
statement -> BREAK .SEMI , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 29 : 
statements -> statement. , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 30 : 
for_statement -> FOR .LPAREN assigment SEMI expression SEMI expression RPAREN tail , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 31 : 
statements -> statements .statement , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
statements_optional -> statements. , [RETURN, RBRACE]
statement -> .assigment SEMI , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
statement -> .CONTINUE SEMI , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
statement -> .BREAK SEMI , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
statement -> .for_statement , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
assigment -> .ID ASSIGN expression , [SEMI]
for_statement -> .FOR LPAREN assigment SEMI expression SEMI expression RPAREN tail , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 32 : 
assigment -> ID .ASSIGN expression , [SEMI]

State 33 : 
names -> init. , [COMMA, SEMI]

State 34 : 
names -> names .COMMA ID , [COMMA, SEMI]
names -> names .COMMA init , [COMMA, SEMI]
declaration -> type names .SEMI , [CONTINUE, RETURN, FLOAT, RBRACE, BREAK, FOR, STRING, ID, VOID, INT]

State 35 : 
init -> ID .ASSIGN constant , [COMMA, SEMI]
names -> ID. , [COMMA, SEMI]

State 36 : 
declarations -> declarations declaration. , [CONTINUE, RETURN, FLOAT, RBRACE, BREAK, FOR, STRING, ID, VOID, INT]

State 37 : 
statement -> assigment SEMI. , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 38 : 
statement -> CONTINUE SEMI. , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 39 : 
main_return -> RETURN .ICONST SEMI , [RBRACE]
main_return -> RETURN .SEMI , [RBRACE]

State 40 : 
program -> main_type MAIN LPAREN parameters_optional RPAREN LBRACE declarations_optional statements_optional main_return .RBRACE , [$]

State 41 : 
statement -> BREAK SEMI. , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 42 : 
for_statement -> FOR LPAREN .assigment SEMI expression SEMI expression RPAREN tail , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
assigment -> .ID ASSIGN expression , [SEMI]

State 43 : 
statements -> statements statement. , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 44 : 
assigment -> ID ASSIGN .expression , [SEMI]
expression -> .ADDOP expression expression , [SEMI]
expression -> .constant , [SEMI]
expression -> .ID , [SEMI]
expression -> .LPAREN expression RPAREN , [SEMI]
expression -> .DIFOP expression expression , [SEMI]
expression -> .RELOP expression expression , [SEMI]
constant -> .SCONST , [SEMI]
constant -> .ICONST , [SEMI]
constant -> .FCONST , [SEMI]

State 45 : 
names -> names COMMA .init , [COMMA, SEMI]
names -> names COMMA .ID , [COMMA, SEMI]
init -> .ID ASSIGN constant , [COMMA, SEMI]

State 46 : 
declaration -> type names SEMI. , [CONTINUE, RETURN, FLOAT, RBRACE, BREAK, FOR, STRING, ID, VOID, INT]

State 47 : 
init -> ID ASSIGN .constant , [COMMA, SEMI]
constant -> .SCONST , [COMMA, SEMI]
constant -> .ICONST , [COMMA, SEMI]
constant -> .FCONST , [COMMA, SEMI]

State 48 : 
main_return -> RETURN SEMI. , [RBRACE]

State 49 : 
main_return -> RETURN ICONST .SEMI , [RBRACE]

State 50 : 
program -> main_type MAIN LPAREN parameters_optional RPAREN LBRACE declarations_optional statements_optional main_return RBRACE. , [$]

State 51 : 
for_statement -> FOR LPAREN assigment .SEMI expression SEMI expression RPAREN tail , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 52 : 
expression -> ADDOP .expression expression , [SEMI]
expression -> .ADDOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .constant , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ID , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .LPAREN expression RPAREN , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .DIFOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .RELOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .SCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .ICONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .FCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 53 : 
expression -> DIFOP .expression expression , [SEMI]
expression -> .ADDOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .constant , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ID , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .LPAREN expression RPAREN , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .DIFOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .RELOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .SCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .ICONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .FCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 54 : 
assigment -> ID ASSIGN expression. , [SEMI]

State 55 : 
expression -> constant. , [SEMI]

State 56 : 
constant -> FCONST. , [SEMI]

State 57 : 
constant -> SCONST. , [SEMI]

State 58 : 
expression -> LPAREN .expression RPAREN , [SEMI]
expression -> .ADDOP expression expression , [RPAREN]
expression -> .constant , [RPAREN]
expression -> .ID , [RPAREN]
expression -> .LPAREN expression RPAREN , [RPAREN]
expression -> .DIFOP expression expression , [RPAREN]
expression -> .RELOP expression expression , [RPAREN]
constant -> .SCONST , [RPAREN]
constant -> .ICONST , [RPAREN]
constant -> .FCONST , [RPAREN]

State 59 : 
expression -> ID. , [SEMI]

State 60 : 
constant -> ICONST. , [SEMI]

State 61 : 
expression -> RELOP .expression expression , [SEMI]
expression -> .ADDOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .constant , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ID , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .LPAREN expression RPAREN , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .DIFOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .RELOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .SCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .ICONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .FCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 62 : 
names -> names COMMA init. , [COMMA, SEMI]

State 63 : 
init -> ID .ASSIGN constant , [COMMA, SEMI]
names -> names COMMA ID. , [COMMA, SEMI]

State 64 : 
init -> ID ASSIGN constant. , [COMMA, SEMI]

State 65 : 
constant -> FCONST. , [COMMA, SEMI]

State 66 : 
constant -> SCONST. , [COMMA, SEMI]

State 67 : 
constant -> ICONST. , [COMMA, SEMI]

State 68 : 
main_return -> RETURN ICONST SEMI. , [RBRACE]

State 69 : 
for_statement -> FOR LPAREN assigment SEMI .expression SEMI expression RPAREN tail , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
expression -> .ADDOP expression expression , [SEMI]
expression -> .constant , [SEMI]
expression -> .ID , [SEMI]
expression -> .LPAREN expression RPAREN , [SEMI]
expression -> .DIFOP expression expression , [SEMI]
expression -> .RELOP expression expression , [SEMI]
constant -> .SCONST , [SEMI]
constant -> .ICONST , [SEMI]
constant -> .FCONST , [SEMI]

State 70 : 
expression -> ADDOP .expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ADDOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .constant , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ID , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .LPAREN expression RPAREN , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .DIFOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .RELOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .SCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .ICONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .FCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 71 : 
expression -> DIFOP .expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ADDOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .constant , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ID , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .LPAREN expression RPAREN , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .DIFOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .RELOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .SCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .ICONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .FCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 72 : 
expression -> ADDOP expression .expression , [SEMI]
expression -> .ADDOP expression expression , [SEMI]
expression -> .constant , [SEMI]
expression -> .ID , [SEMI]
expression -> .LPAREN expression RPAREN , [SEMI]
expression -> .DIFOP expression expression , [SEMI]
expression -> .RELOP expression expression , [SEMI]
constant -> .SCONST , [SEMI]
constant -> .ICONST , [SEMI]
constant -> .FCONST , [SEMI]

State 73 : 
expression -> constant. , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 74 : 
constant -> FCONST. , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 75 : 
constant -> SCONST. , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 76 : 
expression -> LPAREN .expression RPAREN , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ADDOP expression expression , [RPAREN]
expression -> .constant , [RPAREN]
expression -> .ID , [RPAREN]
expression -> .LPAREN expression RPAREN , [RPAREN]
expression -> .DIFOP expression expression , [RPAREN]
expression -> .RELOP expression expression , [RPAREN]
constant -> .SCONST , [RPAREN]
constant -> .ICONST , [RPAREN]
constant -> .FCONST , [RPAREN]

State 77 : 
expression -> ID. , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 78 : 
constant -> ICONST. , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 79 : 
expression -> RELOP .expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ADDOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .constant , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ID , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .LPAREN expression RPAREN , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .DIFOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .RELOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .SCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .ICONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .FCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 80 : 
expression -> DIFOP expression .expression , [SEMI]
expression -> .ADDOP expression expression , [SEMI]
expression -> .constant , [SEMI]
expression -> .ID , [SEMI]
expression -> .LPAREN expression RPAREN , [SEMI]
expression -> .DIFOP expression expression , [SEMI]
expression -> .RELOP expression expression , [SEMI]
constant -> .SCONST , [SEMI]
constant -> .ICONST , [SEMI]
constant -> .FCONST , [SEMI]

State 81 : 
expression -> ADDOP .expression expression , [RPAREN]
expression -> .ADDOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .constant , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ID , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .LPAREN expression RPAREN , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .DIFOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .RELOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .SCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .ICONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .FCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 82 : 
expression -> DIFOP .expression expression , [RPAREN]
expression -> .ADDOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .constant , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ID , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .LPAREN expression RPAREN , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .DIFOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .RELOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .SCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .ICONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .FCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 83 : 
expression -> LPAREN expression .RPAREN , [SEMI]

State 84 : 
expression -> constant. , [RPAREN]

State 85 : 
constant -> FCONST. , [RPAREN]

State 86 : 
constant -> SCONST. , [RPAREN]

State 87 : 
expression -> LPAREN .expression RPAREN , [RPAREN]
expression -> .ADDOP expression expression , [RPAREN]
expression -> .constant , [RPAREN]
expression -> .ID , [RPAREN]
expression -> .LPAREN expression RPAREN , [RPAREN]
expression -> .DIFOP expression expression , [RPAREN]
expression -> .RELOP expression expression , [RPAREN]
constant -> .SCONST , [RPAREN]
constant -> .ICONST , [RPAREN]
constant -> .FCONST , [RPAREN]

State 88 : 
expression -> ID. , [RPAREN]

State 89 : 
constant -> ICONST. , [RPAREN]

State 90 : 
expression -> RELOP .expression expression , [RPAREN]
expression -> .ADDOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .constant , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ID , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .LPAREN expression RPAREN , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .DIFOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .RELOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .SCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .ICONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .FCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 91 : 
expression -> RELOP expression .expression , [SEMI]
expression -> .ADDOP expression expression , [SEMI]
expression -> .constant , [SEMI]
expression -> .ID , [SEMI]
expression -> .LPAREN expression RPAREN , [SEMI]
expression -> .DIFOP expression expression , [SEMI]
expression -> .RELOP expression expression , [SEMI]
constant -> .SCONST , [SEMI]
constant -> .ICONST , [SEMI]
constant -> .FCONST , [SEMI]

State 92 : 
for_statement -> FOR LPAREN assigment SEMI expression .SEMI expression RPAREN tail , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 93 : 
expression -> ADDOP expression .expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ADDOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .constant , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ID , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .LPAREN expression RPAREN , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .DIFOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .RELOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .SCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .ICONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .FCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 94 : 
expression -> DIFOP expression .expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ADDOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .constant , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ID , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .LPAREN expression RPAREN , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .DIFOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .RELOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .SCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .ICONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .FCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 95 : 
expression -> ADDOP expression expression. , [SEMI]

State 96 : 
expression -> LPAREN expression .RPAREN , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 97 : 
expression -> RELOP expression .expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ADDOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .constant , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .ID , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .LPAREN expression RPAREN , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .DIFOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
expression -> .RELOP expression expression , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .SCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .ICONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]
constant -> .FCONST , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 98 : 
expression -> DIFOP expression expression. , [SEMI]

State 99 : 
expression -> ADDOP expression .expression , [RPAREN]
expression -> .ADDOP expression expression , [RPAREN]
expression -> .constant , [RPAREN]
expression -> .ID , [RPAREN]
expression -> .LPAREN expression RPAREN , [RPAREN]
expression -> .DIFOP expression expression , [RPAREN]
expression -> .RELOP expression expression , [RPAREN]
constant -> .SCONST , [RPAREN]
constant -> .ICONST , [RPAREN]
constant -> .FCONST , [RPAREN]

State 100 : 
expression -> DIFOP expression .expression , [RPAREN]
expression -> .ADDOP expression expression , [RPAREN]
expression -> .constant , [RPAREN]
expression -> .ID , [RPAREN]
expression -> .LPAREN expression RPAREN , [RPAREN]
expression -> .DIFOP expression expression , [RPAREN]
expression -> .RELOP expression expression , [RPAREN]
constant -> .SCONST , [RPAREN]
constant -> .ICONST , [RPAREN]
constant -> .FCONST , [RPAREN]

State 101 : 
expression -> LPAREN expression RPAREN. , [SEMI]

State 102 : 
expression -> LPAREN expression .RPAREN , [RPAREN]

State 103 : 
expression -> RELOP expression .expression , [RPAREN]
expression -> .ADDOP expression expression , [RPAREN]
expression -> .constant , [RPAREN]
expression -> .ID , [RPAREN]
expression -> .LPAREN expression RPAREN , [RPAREN]
expression -> .DIFOP expression expression , [RPAREN]
expression -> .RELOP expression expression , [RPAREN]
constant -> .SCONST , [RPAREN]
constant -> .ICONST , [RPAREN]
constant -> .FCONST , [RPAREN]

State 104 : 
expression -> RELOP expression expression. , [SEMI]

State 105 : 
for_statement -> FOR LPAREN assigment SEMI expression SEMI .expression RPAREN tail , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
expression -> .ADDOP expression expression , [RPAREN]
expression -> .constant , [RPAREN]
expression -> .ID , [RPAREN]
expression -> .LPAREN expression RPAREN , [RPAREN]
expression -> .DIFOP expression expression , [RPAREN]
expression -> .RELOP expression expression , [RPAREN]
constant -> .SCONST , [RPAREN]
constant -> .ICONST , [RPAREN]
constant -> .FCONST , [RPAREN]

State 106 : 
expression -> ADDOP expression expression. , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 107 : 
expression -> DIFOP expression expression. , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 108 : 
expression -> LPAREN expression RPAREN. , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 109 : 
expression -> RELOP expression expression. , [ADDOP, DIFOP, FCONST, SCONST, LPAREN, ID, ICONST, RELOP]

State 110 : 
expression -> ADDOP expression expression. , [RPAREN]

State 111 : 
expression -> DIFOP expression expression. , [RPAREN]

State 112 : 
expression -> LPAREN expression RPAREN. , [RPAREN]

State 113 : 
expression -> RELOP expression expression. , [RPAREN]

State 114 : 
for_statement -> FOR LPAREN assigment SEMI expression SEMI expression .RPAREN tail , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 115 : 
for_statement -> FOR LPAREN assigment SEMI expression SEMI expression RPAREN .tail , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
tail -> .LBRACE statements RBRACE , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 116 : 
for_statement -> FOR LPAREN assigment SEMI expression SEMI expression RPAREN tail. , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 117 : 
tail -> LBRACE .statements RBRACE , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
statements -> .statement , [CONTINUE, RBRACE, BREAK, FOR, ID]
statements -> .statements statement , [CONTINUE, RBRACE, BREAK, FOR, ID]
assigment -> .ID ASSIGN expression , [SEMI]
statement -> .assigment SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]
statement -> .CONTINUE SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]
statement -> .BREAK SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]
statement -> .for_statement , [CONTINUE, RBRACE, BREAK, FOR, ID]
for_statement -> .FOR LPAREN assigment SEMI expression SEMI expression RPAREN tail , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 118 : 
statement -> assigment .SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 119 : 
statement -> CONTINUE .SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 120 : 
statement -> for_statement. , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 121 : 
statement -> BREAK .SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 122 : 
statements -> statement. , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 123 : 
for_statement -> FOR .LPAREN assigment SEMI expression SEMI expression RPAREN tail , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 124 : 
tail -> LBRACE statements .RBRACE , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]
statements -> statements .statement , [CONTINUE, RBRACE, BREAK, FOR, ID]
statement -> .assigment SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]
statement -> .CONTINUE SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]
statement -> .BREAK SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]
statement -> .for_statement , [CONTINUE, RBRACE, BREAK, FOR, ID]
assigment -> .ID ASSIGN expression , [SEMI]
for_statement -> .FOR LPAREN assigment SEMI expression SEMI expression RPAREN tail , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 125 : 
statement -> assigment SEMI. , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 126 : 
statement -> CONTINUE SEMI. , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 127 : 
statement -> BREAK SEMI. , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 128 : 
for_statement -> FOR LPAREN .assigment SEMI expression SEMI expression RPAREN tail , [CONTINUE, RBRACE, BREAK, FOR, ID]
assigment -> .ID ASSIGN expression , [SEMI]

State 129 : 
tail -> LBRACE statements RBRACE. , [CONTINUE, RETURN, RBRACE, BREAK, FOR, ID]

State 130 : 
statements -> statements statement. , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 131 : 
for_statement -> FOR LPAREN assigment .SEMI expression SEMI expression RPAREN tail , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 132 : 
for_statement -> FOR LPAREN assigment SEMI .expression SEMI expression RPAREN tail , [CONTINUE, RBRACE, BREAK, FOR, ID]
expression -> .ADDOP expression expression , [SEMI]
expression -> .constant , [SEMI]
expression -> .ID , [SEMI]
expression -> .LPAREN expression RPAREN , [SEMI]
expression -> .DIFOP expression expression , [SEMI]
expression -> .RELOP expression expression , [SEMI]
constant -> .SCONST , [SEMI]
constant -> .ICONST , [SEMI]
constant -> .FCONST , [SEMI]

State 133 : 
for_statement -> FOR LPAREN assigment SEMI expression .SEMI expression RPAREN tail , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 134 : 
for_statement -> FOR LPAREN assigment SEMI expression SEMI .expression RPAREN tail , [CONTINUE, RBRACE, BREAK, FOR, ID]
expression -> .ADDOP expression expression , [RPAREN]
expression -> .constant , [RPAREN]
expression -> .ID , [RPAREN]
expression -> .LPAREN expression RPAREN , [RPAREN]
expression -> .DIFOP expression expression , [RPAREN]
expression -> .RELOP expression expression , [RPAREN]
constant -> .SCONST , [RPAREN]
constant -> .ICONST , [RPAREN]
constant -> .FCONST , [RPAREN]

State 135 : 
for_statement -> FOR LPAREN assigment SEMI expression SEMI expression .RPAREN tail , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 136 : 
for_statement -> FOR LPAREN assigment SEMI expression SEMI expression RPAREN .tail , [CONTINUE, RBRACE, BREAK, FOR, ID]
tail -> .LBRACE statements RBRACE , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 137 : 
for_statement -> FOR LPAREN assigment SEMI expression SEMI expression RPAREN tail. , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 138 : 
tail -> LBRACE .statements RBRACE , [CONTINUE, RBRACE, BREAK, FOR, ID]
statements -> .statement , [CONTINUE, RBRACE, BREAK, FOR, ID]
statements -> .statements statement , [CONTINUE, RBRACE, BREAK, FOR, ID]
assigment -> .ID ASSIGN expression , [SEMI]
statement -> .assigment SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]
statement -> .CONTINUE SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]
statement -> .BREAK SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]
statement -> .for_statement , [CONTINUE, RBRACE, BREAK, FOR, ID]
for_statement -> .FOR LPAREN assigment SEMI expression SEMI expression RPAREN tail , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 139 : 
statements -> statements .statement , [CONTINUE, RBRACE, BREAK, FOR, ID]
tail -> LBRACE statements .RBRACE , [CONTINUE, RBRACE, BREAK, FOR, ID]
statement -> .assigment SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]
statement -> .CONTINUE SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]
statement -> .BREAK SEMI , [CONTINUE, RBRACE, BREAK, FOR, ID]
statement -> .for_statement , [CONTINUE, RBRACE, BREAK, FOR, ID]
assigment -> .ID ASSIGN expression , [SEMI]
for_statement -> .FOR LPAREN assigment SEMI expression SEMI expression RPAREN tail , [CONTINUE, RBRACE, BREAK, FOR, ID]

State 140 : 
tail -> LBRACE statements RBRACE. , [CONTINUE, RBRACE, BREAK, FOR, ID]

